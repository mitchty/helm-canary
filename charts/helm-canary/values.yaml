# Default values for helm-canary
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of replicas
replicaCount: 1

# Docker image
image:
  # -- ghcr image registry
  repository: ghcr.io/mitchty/helm-canary

  # -- Docker pull policy
  pullPolicy: IfNotPresent

  # -- Docker image tag, overrides the image tag whose default is the chart appVersion.
  tag: ""

redis:
  # -- This is entirely overkill for this application
  replicas: 2

  image:
    # -- We use the upstream docker.io image for redis here (docker.io is implicit)
    repository: redis

    # -- Docker pull policy
    pullPolicy: IfNotPresent

    # -- Docker image tag, overrides the image tag whose default is the chart appVersion.
    tag: "latest"

# -- Docker registry secret names as an array
imagePullSecrets: []

# -- String to partially override template  (will maintain the release name)
nameOverride: ""

# -- String to fully override template
fullnameOverride: ""

# TODO helm-canary parameters
canary:

# Service account
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true

  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true

  # -- Annotations to add to the service account
  annotations: {}

  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Map of annotations to add to the pods
podAnnotations: {}

# -- Map of labels to add to the pods
podLabels: {}

# -- Pod Security Context
podSecurityContext: {}
  # fsGroup: 2000

# -- Container Security Context
securityContext: {}
  # capabilities:
  #  drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# -- Specify runtime class
runtimeClassName: ""

# Configure Service
service:

  # -- Service type
  type: LoadBalancer

  # -- Service port
  port: 8080

  # -- Service node port when service type is 'NodePort'
  nodePort: 8081

  # -- Annotations to add to the service
  annotations: {}

# Configure the ingress resource that allows you to access the
ingress:
  # -- Enable ingress controller resource
  enabled: false

  # -- IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  className: ""

  # -- Additional annotations for the Ingress resource.
  annotations: {}
    # kubernetes.io/ingress.class: traefik
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

  # The list of hostnames to be covered with this ingress record.
  hosts:
    - host: helm-canary.local
      paths:
        - path: /
          pathType: Prefix

  # --  The tls configuration for hostnames to be covered with this ingress record.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Configure resource requests and limits
# ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources:
  # -- Pod requests
  requests: {}
    # Memory request
    # memory: 4096Mi

    # CPU request
    # cpu: 2000m

  # -- Pod limit
  limits: {}
    # Memory limit
    # memory: 8192Mi

    # CPU limit
    # cpu: 4000m

# Configure extra options for liveness probe
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
# livenessProbe:
#   # -- Enable livenessProbe
#   enabled: true

#   # -- Request path for livenessProbe
#   path: /

#   # -- Initial delay seconds for livenessProbe
#   initialDelaySeconds: 60

#   # -- Period seconds for livenessProbe
#   periodSeconds: 10

#   # -- Timeout seconds for livenessProbe
#   timeoutSeconds: 5

#   # -- Failure threshold for livenessProbe
#   failureThreshold: 6

#   # -- Success threshold for livenessProbe
#   successThreshold: 1

# # Configure extra options for readiness probe
# # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
# readinessProbe:
#   # -- Enable readinessProbe
#   enabled: true

#   # -- Request path for readinessProbe
#   path: /

#   # -- Initial delay seconds for readinessProbe
#   initialDelaySeconds: 30

#   # -- Period seconds for readinessProbe
#   periodSeconds: 5

#   # -- Timeout seconds for readinessProbe
#   timeoutSeconds: 3

#   # -- Failure threshold for readinessProbe
#   failureThreshold: 6

#   # -- Success threshold for readinessProbe
#   successThreshold: 1

# Configure autoscaling
autoscaling:
  # -- Enable autoscaling
  enabled: false

  # -- Number of minimum replicas
  minReplicas: 1

  # -- Number of maximum replicas
  maxReplicas: 100

  # -- CPU usage to target replica
  targetCPUUtilizationPercentage: 80

  # -- targetMemoryUtilizationPercentage: 80

# -- Additional arguments on the output Deployment definition.
extraArgs: []

# -- Additional environments variables on the output Deployment definition.
extraEnv: []
#  - name: DEBUG
#    value: "1"

# -- Node labels for pod assignment.
nodeSelector: {}

# -- Tolerations for pod assignment
tolerations: []

# -- Affinity for pod assignment
affinity: {}

# -- How to replace existing pods
updateStrategy:
  # -- Can be "Recreate" or "RollingUpdate". Default is RollingUpdate
  type: ""

# -- Topology Spread Constraints for pod assignment
topologySpreadConstraints: {}

# -- Init containers to add to the pod
initContainers: []
# - name: startup-tool
#   image: alpine:3
#   command: [sh, -c]
#   args:
#     - echo init

# -- Use the host’s ipc namespace.
hostIPC: false

# -- Use the host’s pid namespace
hostPID: false

# -- Use the host's network namespace.
hostNetwork: false
